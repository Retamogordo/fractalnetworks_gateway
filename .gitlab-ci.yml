# set up cache to speed up builds
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .cargo/
    - .cache/sccache

before_script:
  - export CARGO_HOME="${PWD}/.cargo"
  - export SCCACHE_DIR="${PWD}/.cache/sccache"

stages:
  - test
  - build
  - docker
  - integration
  - deploy

# make sure that formatting is correct.
rustfmt:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable
  stage: test
  allow_failure: true
  script:
    - cargo fmt -- --check

# make sure there are no issues with the code.
clippy:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable
  stage: test
  allow_failure: true
  script:
    - cargo clippy

# run unit tests.
test:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable
  stage: test
  script:
    - cargo test

# generate release build
build:amd64:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable
  stage: build
  script:
    - cargo build --release
  artifacts:
    paths:
      - target/release/gateway
    expire_in: 1 week

# build for arm target
build:arm32:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable-arm32
  stage: build
  script:
    - cargo build --release --target arm-unknown-linux-gnueabihf
  artifacts:
    paths:
      - target/arm-unknown-linux-gnueabihf/release/gateway
    expire_in: 1 week

# build for arm target
build:arm64:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable-arm64
  stage: build
  script:
    - cargo build --release --target aarch64-unknown-linux-gnu
  artifacts:
    paths:
      - target/aarch64-unknown-linux-gnu/release/gateway
    expire_in: 1 week

# generate swagger API docs.
openapi:
  allow_failure: true
  stage: build
  image: openapitools/openapi-generator-cli
  script:
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i api/gateway_0.1.0.yaml -g html2 -o target/openapi
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i api/gateway_0.1.0.yaml -g openapi -o target/openapi
  artifacts:
    paths:
      - target/openapi
    expire_in: 1 week

# generate rust html documentation
rustdoc:
  image: registry.gitlab.com/fractalnetworks/images/rust:stable
  stage: build
  script:
    - cargo doc
  artifacts:
    paths:
      - target/doc
    expire_in: 1 week

# publish binary, docs and API docs to gitlab pages.
pages:
  image: registry.gitlab.com/fractalnetworks/images/pages
  stage: deploy
  dependencies:
    - build:amd64
    - build:arm32
    - build:arm64
    - openapi
    - rustdoc
  script:
    - mkdir public
    - mv target/doc public/doc
    - mv target/openapi public/api
    - mv target/release/gateway public/gateway-master-amd64
    - sign public/gateway-master-amd64
    - mv target/arm-unknown-linux-gnueabihf/release/gateway public/gateway-master-arm32
    - sign public/gateway-master-arm32
    - mv target/aarch64-unknown-linux-gnu/release/gateway public/gateway-master-arm64
    - sign public/gateway-master-arm64
  artifacts:
    paths:
      - public
    expire_in: 1 week
  only:
    - master

docker:build:
  dependencies:
    - build:amd64
  image: docker
  stage: docker
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

integration:
  tags:
    - cijoe
  services:
    - name: "registry.gitlab.com/fractalnetworks/gateway:$CI_COMMIT_REF_SLUG"
      alias: gateway
  stage: integration
  script:
    - ./scripts/test.sh

docker:publish:
  dependencies:
    - build:amd64
  image: docker
  stage: deploy
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - master
